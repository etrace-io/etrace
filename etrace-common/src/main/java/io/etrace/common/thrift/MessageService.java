/*
 * Copyright 2019 etrace.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package io.etrace.common.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-02")
public class MessageService {

    public interface Iface {

        public void send(java.nio.ByteBuffer head, java.nio.ByteBuffer message) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void send(java.nio.ByteBuffer head, java.nio.ByteBuffer message,
                         org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
            throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void send(java.nio.ByteBuffer head, java.nio.ByteBuffer message) throws org.apache.thrift.TException {
            send_send(head, message);
        }

        public void send_send(java.nio.ByteBuffer head, java.nio.ByteBuffer message)
            throws org.apache.thrift.TException {
            send_args args = new send_args();
            args.setHead(head);
            args.setMessage(message);
            sendBaseOneway("send", args);
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                                    org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                           org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void send(java.nio.ByteBuffer head, java.nio.ByteBuffer message,
                         org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            send_call method_call = new send_call(head, message, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                           org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class send_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.nio.ByteBuffer head;
            private java.nio.ByteBuffer message;

            public send_call(java.nio.ByteBuffer head, java.nio.ByteBuffer message,
                             org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
                             org.apache.thrift.async.TAsyncClient client,
                             org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                             org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.head = head;
                this.message = message;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("send", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                send_args args = new send_args();
                args.setHead(head);
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport
                    = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
        implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(
                new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ?
                    extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface,
                            java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ?
                                extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ?
            extends org.apache.thrift.TBase>> getProcessMap(
            java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("send", new send());
            return processMap;
        }

        public static class send<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_args> {
            public send() {
                super("send");
            }

            public send_args getEmptyArgsInstance() {
                return new send_args();
            }

            protected boolean isOneway() {
                return true;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public org.apache.thrift.TBase getResult(I iface, send_args args) throws org.apache.thrift.TException {
                iface.send(args.head, args.message);
                return null;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(
            AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(
                new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ?
                    extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface,
                                 java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ?
                                     extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,
            org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
            java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ?
                extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("send", new send());
            return processMap;
        }

        public static class send<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, send_args, Void> {
            public send() {
                super("send");
            }

            public send_args getEmptyArgsInstance() {
                return new send_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
                final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }

                    public void onError(java.lang.Exception e) {
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                        } else {
                            _LOGGER.error("Exception inside oneway handler", e);
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, send_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
                throws org.apache.thrift.TException {
                iface.send(args.head, args.message, resultHandler);
            }
        }

    }

    public static class send_args
        implements org.apache.thrift.TBase<send_args, send_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<send_args> {
        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "send_args");
        private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "head", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC
            = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY
            = new send_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY
            = new send_argsTupleSchemeFactory();

        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap
                = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HEAD,
                new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_args.class, metaDataMap);
        }

        public @org.apache.thrift.annotation.Nullable
        java.nio.ByteBuffer head; // required
        public @org.apache.thrift.annotation.Nullable
        java.nio.ByteBuffer message; // required

        public send_args() {
        }

        public send_args(
            java.nio.ByteBuffer head,
            java.nio.ByteBuffer message) {
            this();
            this.head = org.apache.thrift.TBaseHelper.copyBinary(head);
            this.message = org.apache.thrift.TBaseHelper.copyBinary(message);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public send_args(send_args other) {
            if (other.isSetHead()) {
                this.head = org.apache.thrift.TBaseHelper.copyBinary(other.head);
            }
            if (other.isSetMessage()) {
                this.message = org.apache.thrift.TBaseHelper.copyBinary(other.message);
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
            org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
                : TUPLE_SCHEME_FACTORY).getScheme();
        }

        public send_args deepCopy() {
            return new send_args(this);
        }

        @Override
        public void clear() {
            this.head = null;
            this.message = null;
        }

        public byte[] getHead() {
            setHead(org.apache.thrift.TBaseHelper.rightSize(head));
            return head == null ? null : head.array();
        }

        public send_args setHead(byte[] head) {
            this.head = head == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(head.clone());
            return this;
        }

        public send_args setHead(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer head) {
            this.head = org.apache.thrift.TBaseHelper.copyBinary(head);
            return this;
        }

        public java.nio.ByteBuffer bufferForHead() {
            return org.apache.thrift.TBaseHelper.copyBinary(head);
        }

        public void unsetHead() {
            this.head = null;
        }

        /**
         * Returns true if field head is set (has been assigned a value) and false otherwise
         */
        public boolean isSetHead() {
            return this.head != null;
        }

        public void setHeadIsSet(boolean value) {
            if (!value) {
                this.head = null;
            }
        }

        public byte[] getMessage() {
            setMessage(org.apache.thrift.TBaseHelper.rightSize(message));
            return message == null ? null : message.array();
        }

        public send_args setMessage(byte[] message) {
            this.message = message == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(message.clone());
            return this;
        }

        public send_args setMessage(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer message) {
            this.message = org.apache.thrift.TBaseHelper.copyBinary(message);
            return this;
        }

        public java.nio.ByteBuffer bufferForMessage() {
            return org.apache.thrift.TBaseHelper.copyBinary(message);
        }

        public void unsetMessage() {
            this.message = null;
        }

        /**
         * Returns true if field message is set (has been assigned a value) and false otherwise
         */
        public boolean isSetMessage() {
            return this.message != null;
        }

        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case HEAD:
                    if (value == null) {
                        unsetHead();
                    } else {
                        if (value instanceof byte[]) {
                            setHead((byte[])value);
                        } else {
                            setHead((java.nio.ByteBuffer)value);
                        }
                    }
                    break;

                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    } else {
                        if (value instanceof byte[]) {
                            setMessage((byte[])value);
                        } else {
                            setMessage((java.nio.ByteBuffer)value);
                        }
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case HEAD:
                    return getHead();

                case MESSAGE:
                    return getMessage();

            }
            throw new java.lang.IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case HEAD:
                    return isSetHead();
                case MESSAGE:
                    return isSetMessage();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null) { return false; }
            if (that instanceof send_args) { return this.equals((send_args)that); }
            return false;
        }

        public boolean equals(send_args that) {
            if (that == null) { return false; }
            if (this == that) { return true; }

            boolean this_present_head = true && this.isSetHead();
            boolean that_present_head = true && that.isSetHead();
            if (this_present_head || that_present_head) {
                if (!(this_present_head && that_present_head)) { return false; }
                if (!this.head.equals(that.head)) { return false; }
            }

            boolean this_present_message = true && this.isSetMessage();
            boolean that_present_message = true && that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message)) { return false; }
                if (!this.message.equals(that.message)) { return false; }
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetHead()) ? 131071 : 524287);
            if (isSetHead()) { hashCode = hashCode * 8191 + head.hashCode(); }

            hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
            if (isSetMessage()) { hashCode = hashCode * 8191 + message.hashCode(); }

            return hashCode;
        }

        @Override
        public int compareTo(send_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHead()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("send_args(");
            boolean first = true;

            sb.append("head:");
            if (this.head == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.head, sb);
            }
            first = false;
            if (!first) { sb.append(", "); }
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.message, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HEAD((short)1, "head"),
            MESSAGE((short)2, "message");

            private static final java.util.Map<java.lang.String, _Fields> byName
                = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // HEAD
                        return HEAD;
                    case 2: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        private static class send_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public send_argsStandardScheme getScheme() {
                return new send_argsStandardScheme();
            }
        }

        private static class send_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<send_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, send_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HEAD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.head = iprot.readBinary();
                                struct.setHeadIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.message = iprot.readBinary();
                                struct.setMessageIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, send_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.head != null) {
                    oprot.writeFieldBegin(HEAD_FIELD_DESC);
                    oprot.writeBinary(struct.head);
                    oprot.writeFieldEnd();
                }
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeBinary(struct.message);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class send_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public send_argsTupleScheme getScheme() {
                return new send_argsTupleScheme();
            }
        }

        private static class send_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<send_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, send_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol)prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetHead()) {
                    optionals.set(0);
                }
                if (struct.isSetMessage()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetHead()) {
                    oprot.writeBinary(struct.head);
                }
                if (struct.isSetMessage()) {
                    oprot.writeBinary(struct.message);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, send_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol)prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.head = iprot.readBinary();
                    struct.setHeadIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.message = iprot.readBinary();
                    struct.setMessageIsSet(true);
                }
            }
        }
    }

}
